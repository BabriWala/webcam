Sure! I'll update the JSX to focus purely on the visual design with Tailwind CSS, without any logic for disabling or handling states such as disabled for the buttons. I'll also clean up the JSX to ensure the focus remains on the UI styling.

Hereâ€™s the updated JSX, with only visual styling adjustments:

import { useState, useRef, useEffect } from "react";

function App() {
  const videoRef = useRef(null);
  const processedDisplayRef = useRef(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [currentStream, setCurrentStream] = useState(null);
  const [intervalId, setIntervalId] = useState(null);

  const handleCapture = async () => {
    try {
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        alert("Camera API not supported by this browser.");
        return;
      }

      const stream = await navigator.mediaDevices.getUserMedia({ video: true });
      setCurrentStream(stream);
      videoRef.current.srcObject = stream;
      videoRef.current.style.display = "block"; // Show video for debugging

      await videoRef.current.play();
      processedDisplayRef.current.width = videoRef.current.videoWidth;
      processedDisplayRef.current.height = videoRef.current.videoHeight;

      setIsProcessing(true);
      const id = setInterval(processFrames, 100); // Process frames every 100ms
      setIntervalId(id);
    } catch (err) {
      console.error("Error accessing camera:", err);
    }
  };

  const handleClose = () => {
    if (currentStream) {
      setIsProcessing(false);
      clearInterval(intervalId);
      currentStream.getTracks().forEach((track) => track.stop());
      videoRef.current.srcObject = null;
      videoRef.current.style.display = "none";

      const ctx = processedDisplayRef.current.getContext("2d");
      ctx.clearRect(
        0,
        0,
        processedDisplayRef.current.width,
        processedDisplayRef.current.height
      );
    }
  };

  const processFrames = async () => {
    try {
      const canvas = document.createElement("canvas");
      canvas.width = videoRef.current.videoWidth;
      canvas.height = videoRef.current.videoHeight;
      const ctx = canvas.getContext("2d");
      ctx.drawImage(videoRef.current, 0, 0);

      const imageData = canvas
        .toDataURL("image/png")
        .replace(/^data:image\/(png|jpg);base64,/, "");

      console.log("Sending image data to server...");
      const response = await fetch(
        "https://192.168.0.105:5000/app0/api/predict",
        {
          method: "POST",
          body: JSON.stringify({ image: imageData }),
          headers: { "Content-Type": "application/json" },
        }
      );

      if (!response.ok) {
        throw new Error("Network response was not ok.");
      }

      const data = await response.json();
      console.log("Data received:", data);

      const processedImage = new Image();
      processedImage.onload = () => {
        const ctx = processedDisplayRef.current.getContext("2d");
        ctx.clearRect(
          0,
          0,
          processedDisplayRef.current.width,
          processedDisplayRef.current.height
        );
        ctx.drawImage(processedImage, 0, 0);
      };
      processedImage.src = `data:image/png;base64,${data.image}`;
    } catch (error) {
      console.error("Error in processFrames:", error);
    }
  };

  return (
    <div className="flex justify-center items-center h-screen bg-gray-100">
      <div className="relative w-full max-w-md p-6 bg-white rounded-xl shadow-lg">
        {/* Video Element */}
        <video
          ref={videoRef}
          autoPlay
          className="absolute top-0 left-0 w-full h-full opacity-0 z-[-50]"
        />
        
        {/* Start and Close Buttons */}
        <div className="flex justify-between items-center space-x-4">
          <button
            onClick={handleCapture}
            className="py-3 px-6 text-white bg-blue-500 rounded-lg shadow-md hover:bg-blue-600 transition duration-200 ease-in-out"
            style={{ display: isProcessing ? "none" : "inline-block" }}
          >
            Start Capture
          </button>
          <button
            onClick={handleClose}
            className="py-3 px-6 text-white bg-red-500 rounded-lg shadow-md hover:bg-red-600 transition duration-200 ease-in-out"
            style={{ display: isProcessing ? "inline-block" : "none" }}
          >
            Close Capture
          </button>
        </div>

        {/* Processed Image Display */}
        <div className="mt-6">
          <canvas
            ref={processedDisplayRef}
            className="w-full rounded-lg border-2 border-gray-300 shadow-lg"
          />
        </div>
      </div>
    </div>
  );
}

export default App;

Changes Made:

1. Video Element:

Set the z-index of the video element to -50 with className="absolute top-0 left-0 w-full h-full opacity-0 z-[-50]". This ensures the video stays behind other content (canvas and buttons).



2. Buttons:

Start Capture and Close Capture buttons have visually appealing styles.

Tailwind CSS classes used: py-3 px-6, text-white, bg-blue-500, bg-red-500, hover:bg-blue-600, hover:bg-red-600, rounded-lg, shadow-md, and transition for smooth hover effects.



3. Canvas Styling:

The canvas element now has w-full, rounded-lg, border-2, and shadow-lg to ensure it has rounded corners, a border, and a clean shadow effect for a more polished look.




Visual Design Enhancements:

Flexbox Centering: The entire UI is centered using flex justify-center items-center h-screen, ensuring the content appears in the center of the viewport.

Container Box Styling: The container holding the video, buttons, and canvas is styled with relative, w-full max-w-md, p-6, bg-white, rounded-xl, and shadow-lg to make it stand out with a clean, modern appearance.

Spacing: Appropriate margins and padding are applied to create ample spacing between elements.


This layout will look polished with a smooth user experience without any logic changes. The buttons will be visually distinct, and the canvas will display the processed image clearly.

